name: deploy-project

on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  #push:
  #  branches: [ "main" ]
  #pull_request:
  #  branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
env:
  TF_VAR_sel_account_id:     "${{ secrets.TF_VAR_sel_account_id }}"
  TF_VAR_sel_admin_user:     "${{ secrets.TF_VAR_sel_admin_user }}"
  TF_VAR_sel_admin_password: "${{ secrets.TF_VAR_sel_admin_password }}"

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  bootstrap:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
      # Install terraform
      - uses: hashicorp/setup-terraform@v2.0.3
        with:
          terraform_version: 1.9.5

      - name: Setup kubeone
        run: curl -sfL https://get.kubeone.io | sh
        
      - name: Bootstrap k8s cluster
        run: |
          cd ${{vars.BOOTSTRAP_DIR}}
          terraform init \
            -backend-config="endpoints={ s3 = \"https://${{ secrets.SEL_S3_URL }}\" }" \
            -backend-config="key=${{ secrets.SEL_S3_KEY }}" \
            -backend-config="region=ru-1" \
            -backend-config="skip_region_validation=true" \
            -backend-config="skip_credentials_validation=true" \
            -backend-config="skip_requesting_account_id=true" \
            -backend-config="skip_s3_checksum=true" \
            -backend-config="skip_metadata_api_check=true" \
            -backend-config="bucket=${{ secrets.SEL_S3_BUCKET }}" \
            -backend-config="access_key=${{ secrets.SEL_S3_ACCESS_KEY }}" \
            -backend-config="secret_key=${{ secrets.SEL_S3_SECRET_KEY }}"
          terraform apply -auto-approve -input=false && \
          terraform output -json > .out/tf.json && \
          cd .out && \
          source .env && \
          kubeone apply -t tf.json --auto-approve
          kubeone config machinedeployments -t tf.json > kubeone-machinedeployments.yaml
